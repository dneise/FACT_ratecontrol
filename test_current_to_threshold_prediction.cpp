#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file

#include <vector>
#include <cmath>
#include "catch.hpp"
#include "numeric_stl.hpp"

#include "threshold_from_currents.cpp"
#include "../externals/PixelMap.h"

TEST_CASE( "CalcThresholdsFromCurrents", "[CalcThresholdsFromCurrents]" ) {

    PixelMap map;
    map.Read("FACTmap111030.txt");

    thresholds_t thresholds_from_python = {
       291, 291, 296, 291, 326, 304, 321, 274, 288, 291, 287, 296, 380,
       295, 304, 288, 296, 291, 305, 308, 290, 289, 292, 286, 282, 294,
       306, 310, 299, 295, 301, 304, 285, 300, 288, 299, 299, 282, 290,
       293, 294, 293, 288, 292, 299, 297, 287, 293, 296, 291, 293, 292,
       284, 271, 310, 297, 292, 288, 292, 301, 283, 290, 293, 299, 285,
       287, 294, 292, 287, 278, 285, 283, 290, 281, 287, 310, 268, 285,
       301, 284, 294, 300, 298, 343, 286, 287, 302, 287, 291, 282, 367,
       439, 290, 290, 299, 275, 287, 308, 283, 282, 297, 288, 291, 300,
       288, 304, 273, 289, 285, 285, 293, 286, 298, 295, 292, 297, 318,
       302, 324, 339, 308, 303, 292, 293, 302, 287, 326, 318, 281, 287,
       305, 347, 291, 291, 296, 291, 297, 288, 303, 288, 294, 278, 291,
       378, 285, 281, 301, 288, 287, 290, 286, 297, 293, 303, 298, 299,
       290, 294, 294, 291};
    currents_t bias_currents = {
         4.1023455,
         4.9428253,
         4.4305654,
         4.9365568,
         4.896924,
         5.3099093,
         5.1308789,
         4.7925191,
         5.286634,
         6.408607,
         5.507514,
         4.7693572,
         4.845983,
         6.0467148,
         3.1881132,
         4.1332822,
         4.8808084,
         4.3301044,
         4.9048338,
         4.6889257,
         4.7075496,
         4.8253608,
         5.168715,
         4.6944695,
         9.8333855,
         5.7689295,
         5.0049491,
         4.7745109,
         5.4289656,
         5.1163793,
         4.7824907,
         4.6314039,
         5.2866421,
         4.8855896,
         5.1366844,
         5.096478,
         5.7981372,
         5.1678782,
         0.93270206,
         6.2306523,
         5.1665559,
         2.3349929,
         3.3716695,
         4.7930799,
         5.2688017,
         4.9521503,
         4.4343033,
         4.5834193,
         4.5793915,
         3.6742265,
         4.7093401,
         5.2961264,
         5.7167187,
         5.1582203,
         5.8320026,
         4.7848468,
         4.6631775,
         5.2924395,
         5.2144055,
         4.6288428,
         5.4164367,
         4.6968288,
         4.4858789,
         5.4524112,
         4.6714702,
         4.5321503,
         26.646532,
         4.9311996,
         4.5255094,
         4.9202342,
         5.3943439,
         5.358954,
         4.4355116,
         4.1211305,
         4.5041785,
         5.3039207,
         4.929359,
         5.1050997,
         5.157311,
         5.1103883,
         4.9837503,
         5.2987661,
         4.9449821,
         4.4849439,
         5.0319037,
         5.1641717,
         4.7738428,
         5.8682342,
         4.0417824,
         3.8724241,
         4.4317107,
         4.9749951,
         5.314393,
         5.4476862,
         4.5204196,
         4.8629203,
         4.7633619,
         4.9725523,
         5.1275187,
         4.8101945,
         4.7145205,
         5.4726362,
         5.6529441,
         4.6830406,
         4.3570466,
         4.8802061,
         5.1640601,
         4.4885163,
         4.9978347,
         5.168961,
         5.2373638,
         5.5308437,
         4.6594415,
         4.1565652,
         4.6581798,
         4.8092327,
         4.8399315,
         5.1878328,
         4.9442759,
         5.0263963,
         4.7467194,
         4.8632932,
         4.3922806,
         4.3636174,
         4.2211218,
         5.122468,
         4.7189379,
         4.8572903,
         4.9509215,
         5.0444736,
         5.2364864,
         5.20577,
         5.0779982,
         4.7105331,
         4.6791496,
         5.0386047,
         5.3316188,
         5.1261244,
         5.3204746,
         4.7621117,
         4.7702203,
         4.9403005,
         5.4934573,
         5.161221,
         5.1865163,
         5.0120726,
         4.7393122,
         4.7773247,
         4.0784492,
         5.5801854,
         5.1619282,
         5.1703014,
         4.2756023,
         4.51478,
         4.2464228,
         3.7647879,
         5.8265533,
         4.7407174,
         4.5112872,
         5.3055744,
         4.594615,
         5.4172516,
         5.620471,
         4.8877554,
         5.734551,
         5.5623879,
         5.5761085,
         8.2604265,
         4.5632033,
         4.9317713,
         5.1584606,
         5.1359239,
         5.7996373,
         4.4495668,
         4.195425,
         4.9581933,
         5.2197952,
         4.8694229,
         4.7961116,
         3.6380153,
         8.8149033,
         4.6734476,
         5.3294611,
         14.085364,
         6.6440783,
         5.022068,
         5.2486629,
         5.1678872,
         5.6944013,
         5.2134237,
         3.9276197,
         21.565212,
         4.4942312,
         29.847618,
         6.0098877,
         4.2948694,
         4.8248062,
         4.8227901,
         4.4831705,
         4.543962,
         5.7501893,
         4.9351702,
         5.0216122,
         5.0598221,
         5.4811983,
         4.9320164,
         4.8059406,
         5.3514509,
         4.8981709,
         4.7699265,
         4.6198902,
         5.5681443,
         4.3157859,
         4.2539182,
         4.7221513,
         5.0189066,
         4.7553926,
         4.4650855,
         4.5103645,
         4.6678891,
         5.3278742,
         5.2213731,
         4.7409921,
         4.8556824,
         5.444263,
         5.2690096,
         5.3565121,
         5.4376411,
         4.8186946,
         5.2379193,
         5.2673426,
         5.1512141,
         6.131279,
         4.6985106,
         5.3032417,
         4.6612997,
         6.5116649,
         6.385952,
         7.5107484,
         6.3515401,
         4.9374495,
         5.3321214,
         5.3087344,
         5.22996,
         4.9068108,
         5.4933496,
         5.2448802,
         4.6081424,
         4.3279572,
         4.7744527,
         4.8271642,
         4.6386943,
         4.7800655,
         4.8940258,
         4.2033067,
         4.9945607,
         5.2461801,
         4.3131046,
         4.4951186,
         4.9675107,
         5.7742324,
         4.4624109,
         4.8183017,
         3.5831096,
         4.9718618,
         4.9261031,
         4.3943682,
         4.2469301,
         5.0665598,
         4.7497711,
         5.8599625,
         9.6473932,
         0.17479792,
         5.0047135,
         4.5719094,
         4.6554523,
         5.3889632,
         4.3169618,
         4.6244478,
         5.1146927,
         4.5110812,
         4.6232266,
         4.8518009,
         4.6182957,
         4.8165822,
         3.8647144,
         4.9073243,
         5.2323904,
         5.4863358,
         4.8939137,
         5.7067356,
         4.8350668,
         4.8272281,
         4.9352536,
         4.5941024,
         5.0918732,
         4.1333146,
         5.4994526,
         4.2113271,
         4.7770333,
         6.4261107,
         5.8354716,
         6.2346106,
         5.4629498,
         4.0814009,
         4.5154557,
         5.0172358,
         4.007863,
         5.4692583,
         5.2103906,
         5.3647366,
         7.7754726,
         4.7104411,
         4.5106621,
         5.1967402,
         4.7595472,
         4.7586408,
         5.2169414,
         4.2841949,
         5.1752429};

    auto thresholds = CalcThresholdsFromCurrents(bias_currents);
    auto replaced = ReplaceBrokenBiasPatches(thresholds);
    auto sorted_v = SortThresholdsIntoDualTriggerPatchOrder(replaced, map);
    auto combined = CombineThresholds(sorted_v);
    for (int i=0; i<thresholds_from_python.size(); i++){
        REQUIRE(thresholds_from_python[i] == combined[i]);
    }

}

TEST_CASE( "foo", "[foo]" ) {
    std::vector<uint32_t> bias_patch_ids_in_trigger_patch_order = {
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        58,
        59,
        56,
        57,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        74,
        75,
        72,
        73,
        76,
        77,
        78,
        79,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        155,
        156,
        157,
        158,
        159,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        127,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        174,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        182,
        183,
        184,
        185,
        186,
        187,
        188,
        189,
        190,
        191,
        192,
        193,
        194,
        195,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        203,
        204,
        205,
        206,
        207,
        208,
        209,
        210,
        211,
        212,
        213,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        222,
        223,
        224,
        225,
        226,
        227,
        228,
        229,
        230,
        231,
        232,
        233,
        234,
        235,
        236,
        237,
        238,
        239,
        288,
        289,
        290,
        291,
        292,
        293,
        294,
        295,
        296,
        297,
        298,
        299,
        300,
        301,
        302,
        303,
        304,
        305,
        306,
        307,
        308,
        309,
        310,
        311,
        312,
        313,
        314,
        315,
        316,
        317,
        318,
        319,
        256,
        257,
        258,
        259,
        260,
        261,
        262,
        263,
        264,
        265,
        266,
        267,
        268,
        269,
        270,
        271,
        272,
        273,
        274,
        275,
        276,
        277,
        278,
        279,
        280,
        281,
        282,
        283,
        284,
        285,
        286,
        287,
        240,
        241,
        242,
        243,
        244,
        245,
        246,
        247,
        248,
        249,
        250,
        251,
        252,
        253,
        254,
        255
    };
    PixelMap map;
    map.Read("FACTmap111030.txt");
    for (int i=0; i<bias_patch_ids_in_trigger_patch_order.size(); i++){
        CHECK(
            BiasPatchIdsInTriggerPatchOrder(i, map)
            == bias_patch_ids_in_trigger_patch_order[i]
        );
    }
}